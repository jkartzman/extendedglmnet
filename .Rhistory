my.pbeta2(x, 1, 1)
source("~/AMS597/HW6.R")
my.pbeta2(x, 1, 1)
my.pbeta2(3, 1, 1)
my.pbeta1(3, 1, 1)
source("~/AMS597/HW6.R")
my.pbeta2(3, 1, 1)
my.pbeta1(3, 1, 1)
my.pbeta1(3, 1, 1)
my.pbeta2(0.4, 1, 1)
my.pbeta2(0.4, 1, 1)
my.pbeta2(0.4, 1, 1)
my.pbeta1(0.4, 1, 1)
source("~/AMS597/HW6.R")
my.pbeta2(0.4, 1, 1)
my.pbeta1(0.4, 1, 1)
my.pbeta1(0.5, 1, 1)
my.pbeta1(0.6, 1, 1)
my.pbeta1(0.6, 1, 2)
my.pbeta1(0.6, 1, 2)
my.pbeta2(0.6, 1, 2)
0.1:0.9:0.1
seq(1,10,2)
seq(0.1,0.9,0.1)
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
?rnorm
x <- rnorm(20, mean = 0.5)
y <- rnorm(20, mean = 0.5, sd=1.5)
?t.test
t.test(x, y, mean=0)
y <- rnorm(100, mean = 0.5, sd=1.5)
x <- rnorm(100, mean = 0.5)
t.test(x, y, mean=0)
x <- rnorm(100)
t.test(x, y, mean=0)
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
?qnorm
qnorm(0.025)
-qnorm(0.025)
source("~/AMS597/HW6.R")
source("~/AMS597/HW6.R")
((qnorm(0.025)+qnorm(0.2))^2)(2.5)/(0.5)^2
((qnorm(0.025)+qnorm(0.2))^2)
((qnorm(0.025)+qnorm(0.2))^2)*(2.5)/(0.5)^2
source("~/AMS597/HW6.R")
setwd("~/AMS597/Project")
devtools::create("extendedglmnet")
here::dr_here()
install.packages("here")
here::dr_here()
here::dr_here()
devtools::create("extendedglmnet")
?glmnet::glmnet
x <- function(p=c("hi","hello")){
print(p)
}
x(p="hi")
x()
"hi" %in% c("hi")
"hi" %in% c("he")
"hi" %in% c("he") == FALSE
("hi" %in% c("he")) == FALSE
("hi" %in% c("hi")) == FALSE
!("hi" %in% c("hi"))
!("hi" %in% c("he"))
setwd("~/AMS597/Project/extendedglmnet")
devtools::document()
devtools::document()
?glmnet:glmnet
?glmnet:glmnet
glmnet:glmnet
?glmnet::glmnet
random(0,1)
?sample
devtools::document()
?glmnet::glmnet
foo <- function(x, members=c("hello","hi")){
print(members)
}
foo(10)
foo()
foo <- function(x, members=c("hello","hi")){
members <- match.arg(members)
print(members)
}
foo()
foo(members = "hello")
foo(members = "hi")
foo(members = "hi2")
devtools::document()
devtools::document()
devtools::document()
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
library(glmnet)
trainX <- matrix(rnorm(100 * 20), 100, 20)
trainY <- rnorm(100)
glmnet(trainX, trainY)
cv.lasso <- cv.glmnet(trainX, trainY, alpha=1, nfolds=5)
model <- glmnet(trainX, trainY, alpha=1, lambda=cv.lasso$lambda.min)
model
model(trainX)
predict.glm(model, newdata = trainX)
predict(model, newdata = trainX)
predict(model, newx = trainX)
model <- extendedglmnet(trainX, trainY)
predict(model, newx = trainX)
coef(model)
y
trainY
cv.lasso$lambda.min
?glment
?glmnet
coef(model)
c(coef(model))
typeof(coef(model))
coef(model)[1]
coef(model)[2]
z <- 1:21
coef(model)+z
z + coef(model)
as.list(coef(model))
as.vector(coef(model))
cv.lasso <- cv.glmnet(trainX, sample(c(0,1),100,replace=TRUE), alpha=1, nfolds=5)
model <- glmnet(trainX, trainY, alpha=1, lambda=cv.lasso$lambda.min)
model <- glmnet(trainX, trainY, family="binomial",alpha=1, lambda=cv.lasso$lambda.min)
model <- glmnet(trainX, trainY, alpha=1, lambda=cv.lasso$lambda.min,family = "binomial")
cv.lasso <- cv.glmnet(trainX, sample(c(0,1),100,replace=TRUE), alpha=1, nfolds=5,family="binomial")
trainY <- sample(c(0,1),100,replace=TRUE)
cv.lasso <- cv.glmnet(trainX, trainY, alpha=1, nfolds=5,family="binomial")
model <- glmnet(trainX, trainY, alpha=1, lambda=cv.lasso$lambda.min,family = "binomial")
predict(model, newx = trainX)
usethat::use_vignette("introduction")
install.packages("usethat")
usethat::use_vignette("introduction")
devtools::use_vignette("introduction")
usethis::use_vignette("my-vignette")
usethis::use_vignette("my-vignette")
usethis::use_vignette("introduction")
usethis::use_vignette("extendedglmnet")
predict(model, newx = trainX)
x <- matrix(rnorm(100 * 20), 100, 20)
y <- rnorm(100)
model <- extendedglmnet(x,y)
predict(model, newx = matrix(rnorm(20 * 20), 20, 20))
devtools::build(".")
cv.glmnet
glmnet::cv.glmnet
devtools::build(".",vignettes = FALSE)
x1 <- 1:20+rnorm(20)
x1
x1 <- 1:20+rnorm(20,sd=0.5)
x1
x1 <- 1:20
x2 <- 5:25
y <- 3*x1+2*x2+rnorm(20)
x2 <- 5:24
y <- 3*x1+2*x2+rnorm(20)
y
glmnet::glmnet(matrix(c(x1,x2,ncol=2)),y)
x <- matrix(c(x1,x2,ncol=2))
x
x <- matrix(c(x1,x2),ncol=2)
x
glmnet::glmnet(x,y)
model <- glmnet::glmnet(x,y)
model$coefficients
summary(model)$coefficients
summary(model)
x
y
coef(model)
library(glmnet)
glmnet(x,y)
glmnet(x,y)
data(QuickStartExample)
x <- QuickStartExample$x
y <- QuickStartExample$y
x
y
fit <- glmnet(x, y)
coef(fit)
cv.lasso <- cv.glmnet(x, y, alpha=1, nfolds=5)
fit <- glmnet(x, y, lambda=cv.lasso)
fit <- glmnet(x, y, lambda=cv.lasso$lambda.min)
fit
coef(fit)
shape(x)
x
coef(fit)
y <- 3*x1+2*x2+rnorm(20)
x1
x2
x <- matrix(c(x1,x2),ncol=2)
cv.lasso <- cv.glmnet(x, y, alpha=1, nfolds=5)
fit <- glmnet(x, y, lambda=cv.lasso$lambda.min)
coef(fit)
predict(fit,c(1,4))
y <- 3*x1+2*x2
cv.lasso <- cv.glmnet(x, y, alpha=1, nfolds=5)
fit <- glmnet(x, y, lambda=cv.lasso$lambda.min)
coef(fit)
y
predict(fit,x)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
nrow(x)
nrow(y)
y
length(y)
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
rep(0,4)
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
x
y
y[1:5]
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
warnings()
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
warnings()
z <- c(1,2,3,4)
z[1:2] <- z[1:2]+c(3,4)
z
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
z[1:]
z[1:-1]
z[1:len(z)]
z[1:length(z)]
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
warnings()
c(1,2,3,4)+4
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
random.lasso(x,y,"linear",100)
coef <- random.lasso(x,y,"linear",100)
coef
pred <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
y
pred
1:1
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
pred <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
pred
y
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
pred <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
pred
y
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
matrix(1:20,ncol = 1)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"linear",100)
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
x
y <- c(rep(0,10),rep(1,10))
y
coef <- random.lasso(x,y,"logistic",100,2,2)
warnings()
source("~/AMS597/Project/extendedglmnet/R/extendedglmnet.R")
coef <- random.lasso(x,y,"logistic",100,2,2)
pred <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
pred
y
install.packages("~/AMS597/Project/extendedglmnet_1.0.0.tar.gz",repos=NULL,type = "source")
library(extendedglmnet)
x <- matrix(rnorm(100 * 20), 100, 20)
y <- rnorm(100)
model <- extendedglmnet(x,y)
testX <- matrix(rnorm(20 * 20), 20, 20)
predictions <- predict(model, newx = testX)
predictions
model <- extendedglmnet(x,y,predictions="ridge")
model <- extendedglmnet(x,y,model="ridge")
model
x1 <- 1:20
x2 <- 5:24
x <- matrix(c(x1,x2),ncol=2)
y <- 3*x1+2*x2
coef <- extendedglmnet(x,y,model="random lasso",B=100,q1=2,q2=2)
predictions <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
predictions
y
?extendedglmnet
install.packages("~/AMS597/Project/extendedglmnet_1.0.0.tar.gz",repos=NULL,type = "source")
detach("package:extendedglmnet", unload = TRUE)
install.packages("~/AMS597/Project/extendedglmnet_1.0.0.tar.gz",repos=NULL,type = "source")
browseVignettes("extendedglmnet")
library(extendedglmnet)
x1 <- 1:20
x2 <- 5:24
x <- matrix(c(x1,x2),ncol=2)
y <- 3*x1+2*x2
model <- extendedglmnet(x,y)
predictions <- predict(model, newx = x)
predictions
x1 <- 1:20
x2 <- 5:24
x <- matrix(c(x1,x2),ncol=2)
y <- 3*x1+2*x2
model <- extendedglmnet(x,y,model="ridge")
predictions <- predict(model, newx = x)
predictions
coef <- extendedglmnet(x,y,model="random lasso",B=100,q1=2,q2=2)
predictions <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
predictions
x1 <- 1:20
x2 <- 5:24
x <- matrix(c(x1,x2),ncol=2)
y <- c(rep(0,10),rep(1,10))
model <- extendedglmnet(x,y)
predictions <- predict(model, newx = x, response="logistic")
predictions
x1 <- 1:20
x2 <- 5:24
x <- matrix(c(x1,x2),ncol=2)
y <- c(rep(0,10),rep(1,10))
model <- extendedglmnet(x,y)
predictions <- predict(model, newx = x, response="logistic")
predictions
coef <- extendedglmnet(x,y,model="random lasso",response="logistic",B=100,q1=2,q2=2)
predictions <- coef[2]*x[,1]+coef[3]*x[,2]+coef[1]
predictions
gl(4,1,9)
gl(4,2,9)
?anova
logret <- read.table("http://www.ams.sunysb.edu/~pfkuan/Teaching/AMS597/Data/d_logret_6stocks.txt",header=T)
TRUE==T
T
F
logret
lm <- lm(Pfizer ~ Exxon + Citigroup, data=logret)
lm$coeff
y1
y1 <- c(18.2, 20.1, 17.6, 16.8, 18.8, 19.3, 19.1)
y2 <- c(17.4, 18.7, 19.1, 16.4, 15.2, 18.4)
y3 <- c(15.2, 18.8, 17.7, 16.5, 15.9, 17.1, 16.3)
y <- c(y1, y2, y3)
n <- c(7, 6, 7)
group <- c(rep(1, 7), rep(2, 6), rep(3, 7))
ydata <- data.frame(y = y, group = factor(group))
fit <- lm(y ~ group, data = ydata)
anova(fit)
anova(fit)$MSW
anova(fit)$SST
?tapply
rank
?rank
rank(c(1,2,4,6,3,6,2))
rank(c(1,2,4,6,3,5))
rank(c(1,2,4,6,3,7))
?tapply
?kruskal.test
?poly
integrate(function(x){(x/2)*exp((-x^2)/4)})
integrate(function(x){(x/2)*exp((-x^2)/4)},1,2)
x <- 5
-x^2
source("~/AMS597/makeupexam2.R")
F(2)-F(1)
integrate(function(x){exp((-x^2)/4)},1,2)
source("~/AMS597/makeupexam2.R")
F(2)-F(1)
inverse
source("~/AMS597/makeupexam2.R")
F(3)
inverse.F(F(0))
inverse.F(F(3))
source("~/AMS597/makeupexam2.R")
inverse.F(F(3))
F(3)-F(0)
F(100)-F(0)
integrate(function(x){exp((-x^2)/4)},3)
integrate(function(x){exp((-x^2)/4)},1,3)
integrate(function(x){exp((-x^2)/4)},0,3)
inverse.F(0)
inverse.F(0.5)
log(0.5)
source("~/AMS597/makeupexam2.R")
inverse.F(0.5)
inverse.F(F(0.5))
setwd("~/AMS597")
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
mydat
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
mydat$smoking
factors(mydat$smoking)
factor(mydat$smoking)
aov
mydat
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
mydat
median()
median(mydat$y)
source("~/AMS597/makeupexam2.R")
mydat$ycat <- 1:200
mydat
source("~/AMS597/makeupexam2.R")
mydat
mydat[1:150]
mydat[1:150,]
mydat[1:150,2:6]
mydat
mydat[1:150,2:6]
source("~/AMS597/makeupexam2.R")
source("~/AMS597/makeupexam2.R")
precision
Recall
?predict
predict(model,newx=dat_sub2)
dat_sub2$ycat
predict(model,newx=dat_sub2)
predict(model,newdata=dat_sub2)
predict(model,dat_sub2)
?lm
model$call
predict(model,data=dat_sub2)
predict(model,newx=3)
predict(model,newx)
predict(model)
source("~/AMS597/makeupexam2.R")
predictions
source("~/AMS597/makeupexam2.R")
predictions
dat_sub2
length(predict.lm(model,newdata=dat_sub2)$ycat==data_sub2$ycat)
as.vector(predictions)
predictions <- integer(as.vector(predict.lm(model,newdata=dat_sub2)))
source("~/AMS597/makeupexam2.R")
